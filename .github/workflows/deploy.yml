name: Build and deploy Python app to Azure Web App

env:
  AZURE_WEBAPP_NAME: sentiments-predict                # set this to the name of your Azure Web App
  PYTHON_VERSION: '3.12'                               # set this to the Python version to use

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Étape 1 : Check-out du dépôt
      - name: Check out repository
        uses: actions/checkout@v3

      # Étape 2 : Configuration de Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Étape 3 : Vider le cache Python
      - name: Clear Python cache
        shell: cmd
        run: |
          if exist __pycache__ rmdir /S /Q __pycache__
          for /D %%d in (myenv) do if exist %%d (rmdir /S /Q %%d)
          echo "Cache cleared."

      # Étape 4 : Création de l'environnement virtuel et installation des dépendances
      - name: Set up virtual environment and install dependencies
        shell: cmd
        run: |
          python -m venv myenv
          myenv\Scripts\pip install --upgrade pip
          myenv\Scripts\pip install -r requirements.txt

      # Étape 5 : Télécharger les données NLTK
      - name: Download NLTK Data
        shell: cmd
        run: |
          myenv\Scripts\activate && python -c "import nltk; nltk.download('punkt'); nltk.download('wordnet'); nltk.download('omw-1.4'); nltk.download('stopwords')"

      # Étape 6 : Lancer l'API FastAPI dans un processus distinct avec Uvicorn
      #- name: Run FastAPI app in the background
      #  shell: cmd
      #  run: |
      #    myenv\Scripts\activate && uvicorn app:app --host 0.0.0.0 --port 8000 --reload

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Étape 1 : Check-out du dépôt
      - name: Check out repository
        uses: actions/checkout@v3

      # Étape 2 : Connexion à Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Étape 3 : Déployer l'API sur Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Remplace par le nom de ton application Azure
          slot-name: "production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          startup-command: gunicorn -w 4 -k uvicorn.workers.UvicornWorker app:app

